// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: thread_messages.sql

package schema

import (
	"context"

	dto "github.com/dynoinc/ratchet/internal/storage/schema/dto"
)

const addThreadMessage = `-- name: AddThreadMessage :exec
INSERT INTO
    thread_messages_v2 (channel_id, parent_ts, ts, attrs)
VALUES
    ($1, $2, $3, $4) ON CONFLICT (channel_id, parent_ts, ts) DO NOTHING
`

type AddThreadMessageParams struct {
	ChannelID string
	ParentTs  string
	Ts        string
	Attrs     dto.ThreadMessageAttrs
}

func (q *Queries) AddThreadMessage(ctx context.Context, arg AddThreadMessageParams) error {
	_, err := q.db.Exec(ctx, addThreadMessage,
		arg.ChannelID,
		arg.ParentTs,
		arg.Ts,
		arg.Attrs,
	)
	return err
}

const getThreadMessages = `-- name: GetThreadMessages :many
SELECT
    channel_id,
    parent_ts,
    ts,
    attrs
FROM
    thread_messages_v2
WHERE
    channel_id = $1
    AND parent_ts = $2
`

type GetThreadMessagesParams struct {
	ChannelID string
	ParentTs  string
}

func (q *Queries) GetThreadMessages(ctx context.Context, arg GetThreadMessagesParams) ([]ThreadMessagesV2, error) {
	rows, err := q.db.Query(ctx, getThreadMessages, arg.ChannelID, arg.ParentTs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ThreadMessagesV2
	for rows.Next() {
		var i ThreadMessagesV2
		if err := rows.Scan(
			&i.ChannelID,
			&i.ParentTs,
			&i.Ts,
			&i.Attrs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThreadMessagesByServiceAndAlert = `-- name: GetThreadMessagesByServiceAndAlert :many
SELECT
    t.channel_id,
    t.parent_ts,
    t.ts,
    t.attrs
FROM
    thread_messages_v2 t
    JOIN messages_v2 m ON m.channel_id = t.channel_id
    AND m.ts = t.parent_ts
WHERE
    m.attrs -> 'incident_action' ->> 'service' = $1 :: text
    AND m.attrs -> 'incident_action' ->> 'alert' = $2 :: text
    AND attrs -> 'message' ->> 'user' != $3 :: text
`

type GetThreadMessagesByServiceAndAlertParams struct {
	Service string
	Alert   string
	BotID   string
}

func (q *Queries) GetThreadMessagesByServiceAndAlert(ctx context.Context, arg GetThreadMessagesByServiceAndAlertParams) ([]ThreadMessagesV2, error) {
	rows, err := q.db.Query(ctx, getThreadMessagesByServiceAndAlert, arg.Service, arg.Alert, arg.BotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ThreadMessagesV2
	for rows.Next() {
		var i ThreadMessagesV2
		if err := rows.Scan(
			&i.ChannelID,
			&i.ParentTs,
			&i.Ts,
			&i.Attrs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
