// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: runbooks.sql

package schema

import (
	"context"

	dto "github.com/dynoinc/ratchet/internal/storage/schema/dto"
)

const createRunbook = `-- name: CreateRunbook :one
INSERT INTO
    incident_runbooks (attrs)
VALUES
    ($1) RETURNING id
`

func (q *Queries) CreateRunbook(ctx context.Context, attrs dto.RunbookAttrs) (int64, error) {
	row := q.db.QueryRow(ctx, createRunbook, attrs)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRunbook = `-- name: GetRunbook :one
SELECT
    id,
    attrs
FROM
    incident_runbooks
WHERE
    attrs ->> 'service_name' = $1 :: text
    AND attrs ->> 'alert_name' = $2 :: text
ORDER BY
    id DESC
LIMIT
    1
`

type GetRunbookParams struct {
	ServiceName string
	AlertName   string
}

func (q *Queries) GetRunbook(ctx context.Context, arg GetRunbookParams) (IncidentRunbook, error) {
	row := q.db.QueryRow(ctx, getRunbook, arg.ServiceName, arg.AlertName)
	var i IncidentRunbook
	err := row.Scan(&i.ID, &i.Attrs)
	return i, err
}
