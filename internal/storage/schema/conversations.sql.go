// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: conversations.sql

package schema

import (
	"context"

	dto "github.com/dynoinc/ratchet/internal/storage/schema/dto"
)

const addMessage = `-- name: AddMessage :exec
INSERT INTO messages (channel_id, slack_ts, message_ts, created_at, attrs)
VALUES ($1, $2,$3, NOW(), $4)
`

type AddMessageParams struct {
	ChannelID string
	SlackTs   string
	MessageTs string
	Attrs     dto.MessageAttrs
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) error {
	_, err := q.db.Exec(ctx, addMessage,
		arg.ChannelID,
		arg.SlackTs,
		arg.MessageTs,
		arg.Attrs,
	)
	return err
}

const startConversation = `-- name: StartConversation :exec
INSERT INTO conversations (channel_id, slack_ts, attrs)
VALUES ($1, $2, $3)
ON CONFLICT (channel_id, slack_ts) DO NOTHING
`

type StartConversationParams struct {
	ChannelID string
	SlackTs   string
	Attrs     dto.ConversationAttrs
}

func (q *Queries) StartConversation(ctx context.Context, arg StartConversationParams) error {
	_, err := q.db.Exec(ctx, startConversation, arg.ChannelID, arg.SlackTs, arg.Attrs)
	return err
}
