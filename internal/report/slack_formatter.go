package report

import (
	"bytes"
	"fmt"
	"time"

	"github.com/olekukonko/tablewriter"
	"github.com/slack-go/slack"

	"github.com/dynoinc/ratchet/internal/storage/schema/dto"
)

type SlackFormatter struct {
}

// Format formats the report data for Slack display
func (g SlackFormatter) Format(data *dto.ReportData) []slack.Block {
	return []slack.Block{
		slack.NewHeaderBlock(
			slack.NewTextBlockObject("plain_text", "📊 Weekly Operations Report", true, false),
		),
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn",
				fmt.Sprintf("Channel: #%s\n📅 Week: %s",
					data.ChannelName,
					formatWeekRange(data.WeekRange),
				),
				false, false,
			),
			nil, nil,
		),
		// Incidents section header
		slack.NewHeaderBlock(
			slack.NewTextBlockObject("plain_text", "📈 Incidents by Severity", true, false),
		),
		// Incidents table
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", "```\n"+g.generateIncidentsTable(data.Incidents)+"```", false, false),
			nil, nil,
		),
		// Average mitigation time
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn",
				fmt.Sprintf("⏱️ Average Mitigation Time: %s", calculateAvgMitigationTime(data.Incidents)),
				false, false,
			),
			nil, nil,
		),
		// Top alerts section header
		slack.NewHeaderBlock(
			slack.NewTextBlockObject("plain_text", "🔥 Top Alerts", true, false),
		),
		// Top alerts table
		slack.NewSectionBlock(
			slack.NewTextBlockObject("mrkdwn", "```\n"+g.generateTopAlertsTable(data.TopAlerts)+"```", false, false),
			nil, nil,
		),
		// Footer
		slack.NewContextBlock(
			"footer",
			slack.NewTextBlockObject(
				"mrkdwn",
				fmt.Sprintf("🤖 Generated by Ratchet Bot | %s", time.Now().Format(time.RFC1123)),
				false, false,
			),
		),
	}
}

// Helper functions for Slack formatting
func (g SlackFormatter) generateIncidentsTable(incidents []dto.Incident) string {
	var buf bytes.Buffer
	table := tablewriter.NewWriter(&buf)

	table.SetHeader([]string{"SEVERITY", "COUNT", "AVG TIME"})
	table.SetBorders(tablewriter.Border{Left: true, Top: true, Right: true, Bottom: true})
	table.SetCenterSeparator("|")
	table.SetColumnSeparator("|")
	table.SetRowSeparator("-")
	table.SetAlignment(tablewriter.ALIGN_CENTER)
	table.SetHeaderAlignment(tablewriter.ALIGN_CENTER)

	for _, incident := range incidents {
		table.Append([]string{
			incident.Severity,
			fmt.Sprintf("%d", incident.Count),
			formatDuration(incident.AverageTime),
		})
	}

	table.Render()
	return buf.String()
}

func (g SlackFormatter) generateTopAlertsTable(alerts []dto.Alert) string {
	var buf bytes.Buffer
	table := tablewriter.NewWriter(&buf)

	table.SetHeader([]string{"ALERT", "COUNT", "AVG TIME", "LAST SEEN"})
	table.SetBorders(tablewriter.Border{Left: true, Top: true, Right: true, Bottom: true})
	table.SetCenterSeparator("|")
	table.SetColumnSeparator("|")
	table.SetRowSeparator("-")
	table.SetAlignment(tablewriter.ALIGN_LEFT)
	table.SetHeaderAlignment(tablewriter.ALIGN_CENTER)
	table.SetColumnAlignment([]int{
		tablewriter.ALIGN_LEFT,
		tablewriter.ALIGN_CENTER,
		tablewriter.ALIGN_CENTER,
		tablewriter.ALIGN_CENTER,
	})

	for _, alert := range alerts {
		table.Append([]string{
			alert.Name,
			fmt.Sprintf("%d", alert.Count),
			formatDuration(alert.AverageTime),
			formatTimeAgo(alert.LastSeen),
		})
	}

	table.Render()
	return buf.String()
}

// Helper functions
func formatWeekRange(dateRange dto.DateRange) string {
	return dateRange.Start.Format("Jan 2") + " - " + dateRange.End.Format("Jan 2, 2006")
}

func calculateAvgMitigationTime(incidents []dto.Incident) string {
	var totalTime time.Duration
	var totalCount int
	for _, incident := range incidents {
		totalTime += incident.TotalTime
		totalCount += incident.Count
	}
	if totalCount == 0 {
		return "0m"
	}
	avgTime := totalTime / time.Duration(totalCount)
	return formatDuration(avgTime)
}

func formatDuration(d time.Duration) string {
	hours := int(d.Hours())
	minutes := int(d.Minutes()) % 60

	if hours > 0 {
		return fmt.Sprintf("%dh %dm", hours, minutes)
	}
	return fmt.Sprintf("%dm", minutes)
}

func formatTimeAgo(t time.Time) string {
	duration := time.Since(t)
	hours := int(duration.Hours())

	if hours < 24 {
		return fmt.Sprintf("%dh ago", hours)
	}
	days := hours / 24
	return fmt.Sprintf("%dd ago", days)
}
