name: Release

on:
  workflow_dispatch:

jobs:
  build:
    uses: ./.github/workflows/build.yml
    permissions:
      contents: read

  bump_scan_push:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    name: Bump Version, Build, Scan, and Push
    permissions:
      contents: write
      packages: write
      security-events: write
    outputs:
      VERSION: ${{ steps.generate_version.outputs.VERSION }}
      COMMIT_HASH: ${{ steps.commit_and_push.outputs.COMMIT_HASH }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Check for new commits
        id: check_commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found. Proceeding with version bump."
            echo "NEW_COMMITS=true" >> $GITHUB_OUTPUT
            echo "LAST_VERSION=0.0.0" >> $GITHUB_OUTPUT
          else
            NEW_COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if [ -z "$NEW_COMMITS" ]; then
              echo "No new commits since last tag."
              echo "NEW_COMMITS=false" >> $GITHUB_OUTPUT
            else
              echo "New commits found."
              echo "NEW_COMMITS=true" >> $GITHUB_OUTPUT
              echo "LAST_VERSION=${LAST_TAG#v}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate version
        id: generate_version
        if: steps.check_commits.outputs.NEW_COMMITS == 'true'
        run: |
          LAST_VERSION="${{ steps.check_commits.outputs.LAST_VERSION }}"
          IFS='.' read -r major minor patch <<< "$LAST_VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))"
          echo "VERSION=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (early)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        if: steps.check_commits.outputs.NEW_COMMITS == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          tags: |
            ratchet:latest
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.generate_version.outputs.VERSION }}

      - name: Scan Docker Image with Trivy
        id: trivy_scan
        if: steps.check_commits.outputs.NEW_COMMITS == 'true'
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ratchet:latest
          format: "sarif"
          output: trivy-results.sarif
          exit-code: "1"
          ignore-unfixed: true
        continue-on-error: true

      - name: Upload SARIF Report
        if: steps.check_commits.outputs.NEW_COMMITS == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Fail if vulnerabilities found
        if: steps.check_commits.outputs.NEW_COMMITS == 'true' && steps.trivy_scan.outcome == 'failure'
        run: |
          echo "❌ Security vulnerabilities found in the image!"
          echo "Version bump will not be committed and image will not be pushed."
          exit 1

      - name: Commit version update
        id: commit_and_push
        if: steps.check_commits.outputs.NEW_COMMITS == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.generate_version.outputs.VERSION }}
          git push --tags
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Push Docker image (reusing already built image)
        if: steps.check_commits.outputs.NEW_COMMITS == 'true'
        run: |
          echo "Pushing already built Docker images..."
          docker push ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:${{ steps.generate_version.outputs.VERSION }}

  create_release:
    runs-on: ubuntu-latest
    needs: bump_scan_push
    if: needs.bump_scan_push.outputs.VERSION != '' && success()
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.bump_scan_push.outputs.COMMIT_HASH }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.bump_scan_push.outputs.VERSION }}
          name: Release ${{ needs.bump_scan_push.outputs.VERSION }}
          generate_release_notes: true
